package zariable;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashMap;

import ml.dmlc.xgboost4j.java.Booster;
import ml.dmlc.xgboost4j.java.DMatrix;
import ml.dmlc.xgboost4j.java.XGBoost;
import ml.dmlc.xgboost4j.java.XGBoostError;

public class XgboostExample {
    public static boolean checkPredicts(float[][] fPredicts, float[][] sPredicts) {
        if (fPredicts.length != sPredicts.length) {
            return false;
        }

        for (int i = 0; i < fPredicts.length; i++) {
            if (!Arrays.equals(fPredicts[i], sPredicts[i])) {
                return false;
            }
        }

        return true;
    }

    public static void saveDumpModel(String modelPath, String[] modelInfos) throws IOException {
        try{
            PrintWriter writer = new PrintWriter(modelPath, "UTF-8");
            for(int i = 0; i < modelInfos.length; ++ i) {
                writer.print("booster[" + i + "]:\n");
                writer.print(modelInfos[i]);
            }
            writer.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws IOException, XGBoostError {
        // load file from text file, also binary buffer generated by xgboost4j
        DMatrix trainMat = new DMatrix("src/main/resources/data/agaricus.txt.train");
        DMatrix testMat = new DMatrix("src/main/resources/data/agaricus.txt.test");

        HashMap<String, Object> params = new HashMap<String, Object>();
        params.put("eta", 1.0);
        params.put("max_depth", 2);
        params.put("silent", 1);
        params.put("objective", "binary:logistic");


        HashMap<String, DMatrix> watches = new HashMap<String, DMatrix>();
        watches.put("train", trainMat);
        watches.put("test", testMat);

        //set round
        int round = 2;

        //train a boost model
        Booster booster = XGBoost.train(trainMat, params, round, watches, null, null);

        //predict
        float[][] predicts = booster.predict(testMat);

        //save model to modelPath
        File file = new File("src/main/resources/model");
        if (!file.exists()) {
            file.mkdirs();
        }

        String modelPath = "src/main/resources/model/xgb.model";
        booster.saveModel(modelPath);

        //dump model with feature map
        String[] modelInfos = booster.getModelDump("src/main/resources/data/featmap.txt", false);
        saveDumpModel("src/main/resources/model/dump.raw.txt", modelInfos);

        //save dmatrix into binary buffer
        testMat.saveBinary("src/main/resources/model/dtest.buffer");

        //reload model and data
        Booster booster2 = XGBoost.loadModel("src/main/resources/model/xgb.model");
        DMatrix testMat2 = new DMatrix("src/main/resources/model/dtest.buffer");
        float[][] predicts2 = booster2.predict(testMat2);


        //check the two predicts
        System.out.println(checkPredicts(predicts, predicts2));

        System.out.println("start build dmatrix from csr sparse data ...");
        //build dmatrix from CSR Sparse Matrix
        DataLoader.CSRSparseData spData = DataLoader.loadSVMFile("src/main/resources/data/agaricus.txt.train");

        DMatrix trainMat2 = new DMatrix(spData.rowHeaders, spData.colIndex, spData.data,
                DMatrix.SparseType.CSR);
        trainMat2.setLabel(spData.labels);

        //specify watchList
        HashMap<String, DMatrix> watches2 = new HashMap<String, DMatrix>();
        watches2.put("train", trainMat2);
        watches2.put("test", testMat2);
        Booster booster3 = XGBoost.train(trainMat2, params, round, watches2, null, null);
        float[][] predicts3 = booster3.predict(testMat2);

        //check predicts
        System.out.println(checkPredicts(predicts, predicts3));
    }
}
